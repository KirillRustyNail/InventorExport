 private void getComponent(Inventor.ComponentOccurrences incollect, string SUB)
        {
            IEnumerator Em = incollect.GetEnumerator();

            Inventor.ComponentOccurrence objOc;

            Inventor.PartDocument desiredPart = null;
            Inventor.FilletFeature oFilletF = null;

            while (Em.MoveNext() == true)
            {
                objOc = (Inventor.ComponentOccurrence)Em.Current;

                double x = objOc.RangeBox.MaxPoint.X;
                double y = objOc.RangeBox.MaxPoint.Y;
                double z = objOc.RangeBox.MaxPoint.Z;

                

                /*if (SUB != "Sub")  tree.Add(objOc._DisplayName + "(" + objOc.Constraints.Count + ")" + "| x= " +x +" |y= " + y + " |z= " +z);
                else tree.Add("        "+objOc._DisplayName + "(" + objOc.Constraints.Count + ")" + "| x= " + x + " |y= " + y + " |z= " + z);*/

                IEnumerator objconEnum = objOc.Constraints.GetEnumerator();

                getComponent((Inventor.ComponentOccurrences)objOc.SubOccurrences , "Sub");

                //display();

                getConstrains(objconEnum);
            }
        }

        private void getConstrains(IEnumerator objconEnum)
        {
            Inventor.AssemblyConstraint oAsscon;

            while (objconEnum.MoveNext() == true)
            {
                oAsscon = (Inventor.AssemblyConstraint)objconEnum.Current;
              

                Inventor.ComponentOccurrence One = (Inventor.ComponentOccurrence)oAsscon.OccurrenceOne;
                Inventor.ComponentOccurrence Two = (Inventor.ComponentOccurrence)oAsscon.OccurrenceTwo;
                
                if (One != null && Two != null)
                {

                   

                    var Type = oAsscon.GetType();

                   /* if (oAsscon.Type == Inventor.ObjectTypeEnum.kMateConstraintObject)
                    {
                        Inventor.MateConstraint mateConstraint = (Inventor.MateConstraint)oAsscon;

                        Inventor.FaceProxy faceProxy = (Inventor.FaceProxy)mateConstraint.EntityTwo;
                        if (faceProxy != null)
                        {

                            
                            var a = faceProxy.Geometry;
                            var b = faceProxy.Vertices;
                            var c = faceProxy.NativeObject.Vertices;

                            

                            foreach (Inventor.Vertex vertex in faceProxy.NativeObject.Vertices)
                            {
                                var v =vertex.Point.X;
                               // MessageBox.Show("Vertex: " +vertex.Point.X + " "+ vertex.Point.Y + " "+ vertex.Point.Z+" ");
                            }
                        }


                    }*/

                   /* Inventor.MateConstraint mateConstraint = (Inventor.MateConstraint)oAsscon;
                    Inventor.AngleConstraint angleConstraint = (Inventor.AngleConstraint)oAsscon;
                    Inventor.InsertConstraint insertConstraint = (Inventor.InsertConstraint)oAsscon;*/

                   

                   // tree.Add("        {" + One._DisplayName);
                    //tree.Add("        " + Two._DisplayName + "}"+"\n");
                }

                
               
            }

        }